import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

interface Payment {
  id: number;
  agency: string;
  orderId: string;
  orderPrice: number;
  amountPaid: number;
  remaining: number;
  method: string;
  date: string;
  note: string;
}

const PaymentFormPage: React.FC = () => {
  const navigate = useNavigate();

  const [payment, setPayment] = useState<Payment>({
    id: Date.now(),
    agency: "B√¨nh Minh",
    orderId: "DH00123",
    orderPrice: 0,
    amountPaid: 0,
    remaining: 0,
    method: "",
    date: "",
    note: "Thanh to√°n ƒë·ª£t 1",
  });

  
  const formatNumber = (num: number) => {
    if (isNaN(num)) return "";
    return num.toLocaleString("vi-VN");
  };

  
  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;
    let cleanValue = value;

    if (name === "orderPrice" || name === "amountPaid") {
      cleanValue = value.replace(/[^0-9]/g, ""); // b·ªè d·∫•u ph·∫©y, k√Ω t·ª± kh√°c
      cleanValue = cleanValue.replace(/^0+/, ""); // b·ªè 0 ·ªü ƒë·∫ßu
      cleanValue = cleanValue === "" ? "0" : cleanValue;
    }

    const updatedPayment = {
      ...payment,
      [name]:
        name === "orderPrice" || name === "amountPaid"
          ? Number(cleanValue)
          : cleanValue,
    };

    
    if (name === "orderPrice" || name === "amountPaid") {
      updatedPayment.remaining =
        updatedPayment.orderPrice - updatedPayment.amountPaid;
    }

    setPayment(updatedPayment);
  };

  const handleSubmit = () => {
    if (!payment.agency || !payment.orderId || !payment.method) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
      return;
    }

    const history = JSON.parse(localStorage.getItem("paymentHistory") || "[]");
    history.push(payment);
    localStorage.setItem("paymentHistory", JSON.stringify(history));

    alert("üí∞ Ghi nh·∫≠n thanh to√°n th√†nh c√¥ng!");
    navigate("/dealer/staff/payment-history");
  };

  return (
    <div className="max-w-xl mx-auto mt-10 p-6 bg-white shadow-lg rounded-2xl">
      <h1 className="text-2xl font-bold mb-6 text-center text-blue-700">
         Ghi nh·∫≠n thanh to√°n
      </h1>

      <div className="space-y-4 text-gray-800">
        {/* ƒê·∫°i l√Ω */}
        <div>
          <label className="block font-semibold">ƒê·∫°i l√Ω</label>
          <input
            name="agency"
            value={payment.agency}
            onChange={handleChange}
            placeholder="Nh·∫≠p t√™n ƒë·∫°i l√Ω (VD: B√¨nh Minh)"
            className="border p-2 rounded w-full"
          />
        </div>

        {/* M√£ ƒë∆°n h√†ng */}
        <div>
          <label className="block font-semibold">M√£ ƒë∆°n h√†ng</label>
          <input
            name="orderId"
            value={payment.orderId}
            onChange={handleChange}
            placeholder="VD: DH00123"
            className="border p-2 rounded w-full"
          />
        </div>

        {/* Gi√° ƒë∆°n h√†ng */}
        <div>
          <label className="block font-semibold">Gi√° ƒë∆°n h√†ng (VNƒê)</label>
          <input
            name="orderPrice"
            inputMode="numeric"
            value={formatNumber(payment.orderPrice)}
            onChange={handleChange}
            className="border p-2 rounded w-full"
          />
        </div>

        {/* S·ªë ti·ªÅn thanh to√°n */}
        <div>
          <label className="block font-semibold">S·ªë ti·ªÅn thanh to√°n (VNƒê)</label>
          <input
            name="amountPaid"
            inputMode="numeric"
            value={formatNumber(payment.amountPaid)}
            onChange={handleChange}
            className="border p-2 rounded w-full"
          />
        </div>

        {/* S·ªë ti·ªÅn c√≤n l·∫°i */}
        <div>
          <label className="block font-semibold">S·ªë ti·ªÅn c√≤n l·∫°i (VNƒê)</label>
          <input
            name="remaining"
            value={formatNumber(payment.remaining)}
            readOnly
            className="border p-2 rounded w-full bg-gray-100 font-semibold text-red-600"
          />
        </div>

        {/* H√¨nh th·ª©c */}
        <div>
          <label className="block font-semibold">H√¨nh th·ª©c thanh to√°n</label>
          <select
            name="method"
            value={payment.method}
            onChange={handleChange}
            className="border p-2 rounded w-full"
          >
            <option value="">-- Ch·ªçn h√¨nh th·ª©c --</option>
            <option value="Chuy·ªÉn kho·∫£n">Chuy·ªÉn kho·∫£n</option>
            <option value="Ti·ªÅn m·∫∑t">Ti·ªÅn m·∫∑t</option>
          </select>
        </div>

        {/* Ng√†y */}
        <div>
          <label className="block font-semibold">Ng√†y thanh to√°n</label>
          <input
            name="date"
            type="date"
            value={payment.date}
            onChange={handleChange}
            className="border p-2 rounded w-full"
          />
        </div>

        {/* Ghi ch√∫ */}
        <div>
          <label className="block font-semibold">Ghi ch√∫</label>
          <textarea
            name="note"
            value={payment.note}
            onChange={handleChange}
            placeholder="VD: Thanh to√°n ƒë·ª£t 1"
            className="border p-2 rounded w-full"
          ></textarea>
        </div>

        {/* N√∫t l∆∞u */}
        <button
          onClick={handleSubmit}
          className="w-full bg-blue-600 text-white font-bold py-2 rounded-lg hover:bg-blue-700 transition mt-4"
        >
           L∆∞u thanh to√°n
        </button>
      </div>
    </div>
  );
};

export default PaymentFormPage;
